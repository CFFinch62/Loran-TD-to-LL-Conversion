Program PosAid(Input, Output);
{D+,L+}
{$N+,E+}
{$M 49000,0,655360}
   Uses Dos, Crt, Strings, Menus, Coord1, Coord2, Coord_Gb, AtScrn, Math, Flt, Change, Types, Locates;
   Type
      Str30 = String[30];

   Var
      inch: Char;
      x, y, z: Float;
      menu: Integer;
      user: User_Rec;
      ok: Boolean;

   Procedure Select_Gri(Var user: User_Rec);
      Var
         ok: Boolean;
         gri: Integer;
         inch: Char;
      Begin
         Repeat
            ClrScr;
            ok:= True;
            gri:= user.gri;
            MenuWriteString(2,4,60,'Input GRI of new LORAN-C Chain');
            MenuWriteString(2,5,60,'Or press enter to use current      LORAN-C Chain');
            MenuWriteInteger(32,5,4,user.gri);
            MenuReadInteger(53,5,15,gri);
            ok:= Get_Ref_Data(gri, 'chain.inf', user.coord_sys);
            If Not ok Then
               Begin
                  MenuWriteString(4,8,60,'LORAN-C Chain       does not exist in file. Select new GRI');
                  MenuWriteInteger(19,8,4,gri);
                  MenuWriteString(4,9,60,'Press L to list available LORAN-C chains or');
                  MenuWriteString(4,10,60,'Press any other key to re-enter GRI');
                  CursorOff;
                  inch:= ReadKey;
                  If (inch = 'l') Or (inch = 'L') Then
                     ShowGri;
               End
            Else
               user.gri:= gri;
         Until ok;
         Init_J_Matrix(user.lat1, user.lon1);
         Lat_Lon_to_Td(user.lat1, user.lon1, user.td2);
         Init_J_Matrix(user.lat, user.lon);
         Lat_Lon_to_Td(user.lat, user.lon, user.td);
      End;

   Procedure Select_Geo(Var user: User_Rec);
      Var
         i: Integer;
         inch: Char;
         temp: String;
      Begin
         ClrScr;
         MenuWriteString(2,2,60,'Press the indicated key for the desired coordinate system');
         MenuWriteString(2,3,60,'Or press enter to accept current value indicated');
         Case user.coord_sys Of
            NAD27: Begin
                      MenuWriteString(4,6,60,'1 =>   NAD27  <===');
                      MenuWriteString(4,7,60,'2 =>   WGS72');
                      MenuWriteString(4,8,60,'3 =>   NAD83');
                      MenuWriteString(4,9,60,'4 =>   WGS84');
                   End;
            WGS72: Begin
                      MenuWriteString(4,6,60,'1 =>   NAD27');
                      MenuWriteString(4,7,60,'2 =>   WGS72  <===');
                      MenuWriteString(4,8,60,'3 =>   NAD83');
                      MenuWriteString(4,9,60,'4 =>   WGS84');
                   End;
            NAD83: Begin
                      MenuWriteString(4,6,60,'1 =>   NAD27');
                      MenuWriteString(4,7,60,'2 =>   WGS72');
                      MenuWriteString(4,8,60,'3 =>   NAD83  <===');
                      MenuWriteString(4,9,60,'4 =>   WGS84');
                   End;
            WGS84: Begin
                      MenuWriteString(4,6,60,'1 =>   NAD27');
                      MenuWriteString(4,7,60,'2 =>   WGS72');
                      MenuWriteString(4,8,60,'3 =>   NAD83');
                      MenuWriteString(4,9,60,'4 =>   WGS84  <===');
                   End;
         End;   {Case Statement}
         CursorOff;
         inch:= Readkey;
         CursorBig;
         Case inch Of
            '1': Change_Coord(NAD27, user);
            '2': Change_Coord(WGS72, user);
            '3': Change_Coord(NAD83, user);
            '4': Change_Coord(WGS84, user);
            Else;
         End;
      End;

   Procedure Select_Format(Var user: User_Rec);
      Var
         i: Integer;
         temp: String;
         inch: Char;
      Begin
         ClrScr;
         MenuWriteString(2,2,60,'Press indicated key for desired format');
         MenuWriteString(2,3,60,'Or press enter to accept current value indicated');
         Case user.mode Of
         1: Begin
               MenuWriteString(4,6,60,'1 =>    +/- dd.dddddd   <===');
               MenuWriteString(4,7,60,'2 =>     dd.dddddd  X');
               MenuWriteString(4,8,60,'3 =>     dd mm.mmmm  X');
               MenuWriteString(4,9,60,'4 =>     ddd mm ss.sss  X');
            End;
         2: Begin
               MenuWriteString(4,6,60,'1 =>    +/- dd.dddddd');
               MenuWriteString(4,7,60,'2 =>     dd.dddddd  X   <===');
               MenuWriteString(4,8,60,'3 =>     dd mm.mmmm  X');
               MenuWriteString(4,9,60,'4 =>     ddd mm ss.sss  X');
            End;
         3: Begin
               MenuWriteString(4,6,60,'1 =>    +/- dd.dddddd');
               MenuWriteString(4,7,60,'2 =>     dd.dddddd  X');
               MenuWriteString(4,8,60,'3 =>     dd mm.mmmm  X   <===');
               MenuWriteString(4,9,60,'4 =>     ddd mm ss.sss  X');
            End;
         4: Begin
               MenuWriteString(4,6,60,'1 =>    +/- dd.dddddd');
               MenuWriteString(4,7,60,'2 =>     dd.dddddd  X');
               MenuWriteString(4,8,60,'3 =>     dd mm.mmmm  X');
               MenuWriteString(4,9,60,'4 =>     ddd mm ss.sss  X   <===');
            End;
         End;  {Case Statement}
         CursorOff;
         inch:= Readkey;
         CursorBig;
         Case inch Of
            '1': user.mode:= 1;
            '2': user.mode:= 2;
            '3': user.mode:= 3;
            '4': user.mode:= 4;
            Else;
         End;
      End;  {Select Format}

   Procedure GiveCreditWhereCreditDue;
      Var
        inch: Char;
      Begin
         CursorOff;
         ClrScr;
         Writeln;
         Writeln;
         Writeln('              U.S. COAST GUARD RESEARCH AND DEVELOPMENT CENTER');
         Writeln('                    Avery Point,  Groton, CT  06340-6096');
         Writeln;
         Writeln('                           Positioning Aid   2.1a');
         Writeln('                              12 October 1995');
         Writeln;
         Writeln;
         Writeln('**************************************************************************');
         Writeln('***                          NOTICE TO ALL USERS                       ***');
         Writeln('**************************************************************************');
         Writeln('*** All users of this software program are herby put on notice that    ***');
         Writeln('*** use of this program to produce certain desired results is entirely ***');
         Writeln('*** at the risk of the user.  The Government makes no representations  ***');
         Writeln('*** regarding the reliability or accurateness of the program and       ***');
         Writeln('*** specifically warns all users that the program is not intended as a ***');
         Writeln('*** real-time navigational program.  Further, the Government does not  ***');
         Writeln('*** make any warranties, express or implied, concerning the reliability***');
         Writeln('*** or accurateness of the data generated by the program; assumes no   ***');
         Writeln('*** liability for the correctness of the results produced through the  ***');
         Writeln('*** use of the program; and assumes no liability for damages, which    ***');
         Writeln('*** may occur through use of the program.                              ***');
         Writeln('**************************************************************************');
         Writeln;
         Writeln('                        Press any key to start program');
         inch:= Readkey;
         CursorBig;
      End;


{$I Geo.inc}
{$I TPos.inc}
{$I LPos.inc}
   Procedure Help;
      Var
         inch: Char;
      Begin
         ClrScr;
         MenuWriteString(2,2,60,'                      HELP SCREEN');
         MenuWriteString(2,4,60,'Press 1 to convert Lat/Lon between geodetic coordinate systems');
         MenuWriteString(2,5,60,'Press 2 to convert positions in Lat/Lon to LORAN-C TD''s');
         MenuWriteString(2,6,60,'Press 3 to convert positions in LORAN-C TD''s to Lat/Lon');
         MenuWriteString(2,7,60,'Press 4 to do range /bearing calculations between two positions');
         MenuWriteString(2,8,60,'Press C to change the default parameters used in program');
         MenuWriteString(2,9,60,'Press H brings up this display');
         MenuWriteString(2,9,60,'Press Q to terminate program');
         MenuWriteString(2,11,60,'Press any key to continue with program');
         CursorOff;
         inch:= ReadKey;
         CursorBig;
      End;



   Procedure DisplayMainMenu;
      Begin
         ClrScr;
         MenuWriteString(2,2,60,'                         MAIN MENU');
         MenuWriteString(2,4,60,'Select desired function');
         MenuWriteString(2,6,60,'1 => Geodetic coordinate conversion');
         MenuWriteString(2,7,60,'2 => Convert Lat/Lon to TD''s');
         MenuWriteString(2,8,60,'3 => Convert TD''s to Lat/Lon');
         MenuWriteString(2,9,60,'4 => Determine range and bearing between two positions');
         MenuWriteString(2,10,60,'C => Change defaults');
         MenuWriteString(2,11,60,'H => Help');
         MenuWriteString(2,12,60,'Q => Quit');
      End;

   Procedure ActOnMainMenu(Var user:User_Rec);
      Var
         inch: Char;
         quit, ok: Boolean;
      Begin
         quit:= False;
         Repeat
            inch:= '0';
            CursorOff;
            inch:= ReadKey;
            CursorBig;
            Case inch Of
               '1': Geo(user);    {geodetic coordinate conversions}
               '2': TPos(user);   {Lat/Lon positions to TD positions}
               '3': Lpos(user);   {TD positions to Lat/Lon positions}
               '4': Locate(user); {range/bearing calculation}
               'c','C': ChangeDefaults(user);  {change defaults of system}
               'h','H': Help;
               'q','Q': quit:= True
               Else inch:= '0';
            End;   {Case statement}
            ok:= Get_Ref_Data(user.gri, 'chain.inf', user.coord_sys);
            Init_J_Matrix(user.lat, user.lon);
            DisplayMainMenu;
         Until quit;
      End;   {ActOnMainMenu}


   Begin
      GiveCreditWhereCreditDue;
      ClrScr;
      SetDefaults(user);
      DisplayMainMenu;
      ActOnMainMenu(user);
   End.

