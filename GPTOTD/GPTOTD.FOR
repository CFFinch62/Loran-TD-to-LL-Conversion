      PROGRAM GPTOTD
C     HYPERBOLIC FIX / CIRCULAR FIX PROGRAM
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION DEG(4,2),XMIN(4,2),SEC(4,2),NAME(2),RAD(4),ZLATM(2),
     $ZLATS(2),ZLONM(2),ZLONS(2),RRHO(2),IASF(2),DEL(2),BEDL(2),
     $XK(2),PAIR(3),SM(2),SS(2)
      CHARACTER*1 ASIGN,OSIGN,ISLAVE(2)
      INTEGER GRI,FACT
      DATA RD/0.1745329252E-1/RM/0.2908882086E-3/
     $RS/0.4848136800E-5/
     $DR/57.29577951/
      DATA PAIR/'PAIR  ','PAIR  ','RATE  '/
	 WRITE(*,*)'					'
	 WRITE(*,*)'           !!!     DISCLAMER      !!!'
	 WRITE(*,*)'					'
	 WRITE(*,*)' THIS PROGRAM IS FURNISHED BY THE GOVERNMENT AND'
	 WRITE(*,*)' IS ACCEPTED AND USED BY THE RECIPIENT UPON THE'
	 WRITE(*,*)' EXPRESS UNDERSTANDING THAT THE UNITED STATES '
	 WRITE(*,*)' GOVERNMENT MAKES NO WARRENTIES, EXPRESSED OR IMPLIED'
	 WRITE(*,*)' CONCERNING THE ACCURACY, COMPLETENESS, RELIABILITY,'
	 WRITE(*,*)' USABILITY, OR SUITABILITY FOR ANY PARTICULAR PURPOSE'
	 WRITE(*,*)' OF THE INFORMATION / DATA CONTAINED IN THIS PROGRAM'
	 WRITE(*,*)' OR FURNISHED IN CONNECTION THEREWITH, AND THE UNITED'
	 WRITE(*,*)' STATES SHALL BE UNDER NO LIABILITY WHATSOEVER TO ANY'
	 WRITE(*,*)' PERSON BY REASON OF ANY USE MADE THEREOF.'
	 WRITE(*,*)' '
	 WRITE(*,*)' THE PROGRAM HEREIN BELONGS TO THE GOVERNMENT.'
	 WRITE(*,*)' THEREFORE THE RECIPIENT FURTHER AGREES NOT TO ASSERT'
	 WRITE(*,*)' ANY PROPIETARY RIGHTS THEREIN OR TO REPRESENT THIS '
	 WRITE(*,*)' PROGRAM TO ANYONE AS OTHER THAN A GOVERNMENT'
	 WRITE(*,*)' PROGRAM'
	 WRITE(*,*)'			'

C     CALL STATION TO GET STATION POSITION, CODING DELAY,
C     EARTH CONSTANT, RATE NAME.
1     CALL STATION(IASF,DEL,A,B,DEG,XMIN,SEC,GRI,ISLAVE)
      N1=IASF(1)
      N2=IASF(2)
      FLAG=0.0
      E2=1.0-(B*B)/(A*A)
      DO 4 I=1,2
      DO 2 J=1,4
       IF (DEG(J,I).GE.0) THEN
          FACT=1
       ELSE
          FACT=-1
       END IF
2      RAD(J)=(DABS(DEG(J,I))*RD+XMIN(J,I)*RM+SEC(J,I)*RS)
     $*FACT
       ZLATM(I)=RAD(1)
       ZLONM(I)=RAD(2)
       ZLATS(I)=RAD(3)
       ZLONS(I)=RAD(4)
       RRHO(I)=299.6911624
       IF(IASF(I).EQ.2) RRHO(I)=29468.0870D0
       IF(IASF(I).EQ.3) RRHO(I)=299.7080D0
       BEDL(I)=0.00D0

C     TEST FOR RANGE SYSTEM
      IF(ZLATS(I).EQ.0.0.AND.ZLONS(I).EQ.0.0) GO TO 4

C     TEST FOR OMEGA
      IF(IASF(I).EQ.2) GO TO 3

C     COMPUTE EMISSION DELAY

      CALL INV(A,B,ZLATM(I),ZLONM(I),ZLATS(I),ZLONS(I),FLAG,DIST,AZ)
      DIST=DIST/RRHO(I)

C     COMPUTE ALL-SEAWATER PATH CORRECTION FOR LORAN-C
      IF (IASF(I).EQ.1) CALL ASFCMP(DIST)
      BEDL(I)=DIST+DEL(I)
      GO TO 4
   3  BEDL(I)=900.00D0
   4  CONTINUE
C     WRITE HEADER
599   WRITE(*,*)' YOUR OPTIONS ARE '
      WRITE(*,*)'     1) SELECT NEW STATIONS '
      WRITE(*,*)'     2) DIAL READINGS TO GP '
      WRITE(*,*)'     3) GP TO DIAL READINGS '
      WRITE(*,*)'     4) EXIT TO DOS         '
      WRITE(*,*)' ENTER SELECTION ? '
      READ(*,8,ERR=599)ICHOICE
8     FORMAT(I1)
      IF(ICHOICE.LT.1.OR.ICHOICE.GT.4) GO TO 599
      IF (ICHOICE.EQ.1) GO TO 1
      IF (ICHOICE.EQ.2) GO TO 605
      IF (ICHOICE.EQ.3) GO TO 98
      IF (ICHOICE.EQ.4) GO TO 99

C     READ DATA CARD (DIAL READINGS TO GEOGRAPHIC)
605   WRITE(*,601)
601   FORMAT( ' ENTER APPROXIMATE POSITION AND DIAL READINGS'/
     $ ' DDMMA DDDMMA XXXXX.XX XXXXX.XX')
5     READ(*,200,ERR=605)IADEG,IAMIN,ASIGN,IODEG,IOMIN,OSIGN,
     $XK(1),XK(2)
200   FORMAT(I2,I2,A1,1X,I3,I2,A1,1X,2(F8.2,1X))
      ISUM=IADEG+IAMIN+IODEG+IOMIN
      IF(ISUM.EQ.0) GO TO 6
      ADEG=IADEG
      AMIN=IAMIN
      ODEG=IODEG
      OMIN=IOMIN
      SIGNA=+1.
      IF (ASIGN.EQ.'S') SIGNA=-1.
      SIGNO=+1.
      IF (OSIGN.EQ.'E') SIGNO=-1.
      ZLAT=(DABS(ADEG)*RD+AMIN*RM)*SIGNA
      ZLON=(DABS(ODEG)*RD+OMIN*RM)*SIGNO

C     COMPUTE FIX
6     CALL FIX(A,B,ZLATM,ZLONM,ZLATS,ZLONS,BEDL,XK,RRHO,E2,IASF,FLAG,
     &ZLAT,ZLON)

C     TEST FOR 'NO FIX'
      IF (FLAG.LT.-98.0) GO TO 7

C     WRITE FIX
      ASIGN='N'
      IF (ZLAT.LT.0.0) ASIGN='S'
      ZDEG=DABS(ZLAT)*DR
      IDEG=ZDEG
      ZZDEG=IDEG
      ZMIN=(ZDEG-ZZDEG)*60.00D0
      MIN=ZMIN
      ZZMIN=MIN
      ZSEC=(ZMIN-ZZMIN)*60.00D0
      OSIGN='W'
      IF (ZLON.LT.0.0) OSIGN='E'
      ZDEG=DABS(ZLON)*DR
      IIDEG=ZDEG
      ZZDEG=IIDEG
      ZMIN=(ZDEG-ZZDEG)*60.00D0
      MMIN=ZMIN
      ZZMIN=MMIN
      YSEC=(ZMIN-ZZMIN)*60.00D0
      WRITE(*,300)(XK(I),I=1,2),IDEG,MIN,ZSEC,ASIGN,IIDEG,MMIN,YSEC,
     $OSIGN
300   FORMAT(1X,F8.2,2X,F8.2,5X,I2,I3,F6.2,A1,5X,I3,I3,F6.2,A1)
      GO TO 599

C     WRITE 'NO FIX'
7     WRITE(*,400)(XK(I),I=1,2)
400   FORMAT(1X,F8.2,2X,F8.2,5X,'NO FIX')
      FLAG=1.0
      GO TO 599

C     READ DATA CARD (GEOGRAPHIC TO DIAL READING)
98    WRITE(*,*)'ENTER LATITUDE DEGREES ?'
      READ(*,'(F2.0)')ADEG
      WRITE(*,*)'               MINUTES ?'
      READ(*,'(F2.0)')AMIN
      WRITE(*,*)'               SECONDS ?'
      READ(*,'(F4.2)')ASEC
      WRITE(*,*)'ENTER N=NORTH OR S=SOUTH ?'
      READ(*,'(A1)')ASIGN
      WRITE(*,*)'ENTER LONGITUDE DEGREES ?'
      READ(*,'(F3.0)')ODEG
      WRITE(*,*)'                MINUTES ?'
      READ(*,'(F2.0)')OMIN
      WRITE(*,*)'                SECONDS ?'
      READ(*,'(F4.2)')OSEC
      WRITE(*,*)'ENTER E=EAST OR W=WEST  ?'
      READ(*,'(A1)')OSIGN
      SIGNA=+1.0
      SIGNO=+1.0
      IF (ASIGN.EQ.'S') SIGNA=-1.0
      IF (OSIGN.EQ.'E') SIGNO=-1.0
      ZLAT=(ADEG*RD+AMIN*RM+ASEC*RS)*SIGNA
      ZLON=(ODEG*RD+OMIN*RM+OSEC*RS)*SIGNO

C     COMPUTE DISTANCE TO MASTER
      DO 11 I=1,2
      CALL INV(A,B,ZLATM(I),ZLONM(I),ZLAT,ZLON,FLAG,DIST,AZ)
      DIST=DIST/RRHO(I)

C     COMPUTE ALL-SEAWATER PATH CORRECTION FOR LORAN-C
      IF (IASF(I).EQ.1) CALL ASFCMP(DIST)
      SM(I)=DIST

C     TEST FOR RANGE SYSTEM
      IF (ZLATS(I).EQ.0.0.AND.ZLONS(I).EQ.0.0) GO TO 10

C     COMPUTE DISTANCE TO SLAVE
      CALL INV(A,B,ZLATS(I),ZLONS(I),ZLAT,ZLON,FLAG,DIST,AZ)
      DIST=DIST/RRHO(I)

C     COMPUTE ALL-SEAWATER PATH CORRECTION FOR LORAN-C
      IF (IASF(I).EQ.1) CALL ASFCMP(DIST)
      SS(I)=DIST

C     COMPUTE DIAL READINGS
      XK(I)=BEDL(I)+SS(I)-SM(I)
      GO TO 11
10    XK(I)=SM(I)
11    CONTINUE

C     CONVERT RADIANS LAT/LON TO INTEGER DEGREES,
C     INTEGER MINUTES, AND REAL SECONDS.
      CALL RAD2DMS(ZLAT,IADEG,IAMIN,ASEC)
      CALL RAD2DMS(ZLON,IODEG,IOMIN,OSEC)

C     WRITE DIAL READINGS
      WRITE(*,600) IADEG,IAMIN,ASEC,ASIGN,IODEG,IOMIN,
     $OSEC,OSIGN,(XK(I),I=1,2)
600   FORMAT(1X,I3,1X,I3,1X,F6.2,A1,5X,I4,1X,I3,1X,F6.2,A1,5X,F10.2,2X,
     $F10.2)
      GO TO 599

99    STOP
      END


      SUBROUTINE STATION(IASF,DEL,POLAR,EQUIT,DEG,XMIN,SEC,GRI,ISLAVE)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION DEG(4,2),XMIN(4,2),SEC(4,2),DEL(2),IASF(2)
     &,IGRI(2),IDEG(4),MIN(4)
      INTEGER GRI
      CHARACTER*1 ISLAVE(2),EORW,NORS,IS

C     ENTER DATUM, THEN OPEN APPROPRIATE XMITR FILE
C     AND DEFINE EARTH CONSTANTS...
5     WRITE(*,*)'  ENTER DATUM,  1=WGS-72 , 2=NAD , 3=WGS-84 '
      READ(*,'(I1)')IDTM
      IF(IDTM.LT.1.OR.IDTM.GT.3) GO TO 5
      IF(IDTM.EQ.1) THEN
         OPEN(10,FILE='FWGS72.')
         POLAR=6378135.00D0
         EQUIT=6356750.52D0
      ELSE IF(IDTM.EQ.2) THEN
         OPEN(10,FILE='FNAD.')
         POLAR=6378206.40D0
         EQUIT=6356583.80D0
      ELSE
         OPEN(10,FILE='FWGS84.')
         POLAR=6378137.00D0
         EQUIT=6356752.3142D0
      END IF
      WRITE(*,*)'   1) LORAN-C '
      WRITE(*,*)'   2) LORAN-A '
      WRITE(*,*)'   3) OMEGA   '
      WRITE(*,*)' PLEASE ENTER YOUR CHOICE. ? '
      READ(*,'(I1)')ICHOICE
      DO 82 I=1,2
  82  IASF(I)=ICHOICE
      IF (ICHOICE.NE.1) GO TO 600

C     NOW INPUT GRI AND SLAVES
 9    DO 15 I=1,2
      WRITE(*,*)' ENTER STATION ',I,' XXXXA '
      READ(*,'(I4,A1)',ERR=9)IGRI(I),ISLAVE(I)
15    CONTINUE
      IF (IGRI(1).EQ.IGRI(2)) GO TO 20
      WRITE(*,*)' GRI DOES NOT MATCH '
      WRITE(*,*)' '
      GO TO 9
  20  GRI=IGRI(1)

C     NOW SEARCH XMITR FILE W/ GRI.  GET MASTER L/L
24    READ(10,25,ERR=901,END=300)NGRI,IS,DEG(1,1),XMIN(1,1),SEC(1,1)
     &,NORS,DEG(2,1),XMIN(2,1),SEC(2,1),EORW,DEL(I)
25    FORMAT(1X,I4,A1,F3.0,F2.0,F6.2,A1,1X,F3.0,F2.0,F6.2,A1,1X,F5.0)
      IF (NGRI.NE.IGRI(1)) GO TO 24
      IF (NORS.EQ.'S') DEG(1,1)=-DEG(1,1)
      IF (EORW.EQ.'E') DEG(2,1)=-DEG(2,1)
C     NOW GET L/L AND CODING DELAY
      DO 81 K=1,2
68    READ(10,25,ERR=901,END=900)NGRI,IS,DEG(3,K),XMIN(3,K),SEC(3,K)
     &,NORS,DEG(4,K),XMIN(4,K),SEC(4,K),EORW,DEL(K)
      IF (ISLAVE(K).NE.IS) GO TO 68
      IF (NORS.EQ.'S') DEG(3,K)=-DEG(3,K)
      IF (EORW.EQ.'E') DEG(4,K)=-DEG(4,K)
      DEG(K,2)=DEG(K,1)
      XMIN(K,2)=XMIN(K,1)
      SEC(K,2)=SEC(K,1)
81    CONTINUE
      GO TO 805
600   DO 800 I=1,2
      WRITE(*,801)I
801   FORMAT(' ENTER STATION POSITION  ',I1)
      WRITE(*,*)' LATITUDE DEGREES '
      READ(*,'(F3.0)')DEG(1,1)
      WRITE(*,*)'          MINUTES '
      READ(*,'(F2.0)')XMIN(1,1)
      WRITE(*,*)'          SECONDS '
      READ(*,'(F5.2)')SEC(1,1)
      WRITE(*,*)' N=NORTH, S=SOUTH '
      READ(*,'(A1)')NORS
      WRITE(*,*)' LONGITUDE DEGREES '
      READ(*,'(F3.0)')DEG(2,1)
      WRITE(*,*)'           MINUTES '
      READ(*,'(F2.0)')XMIN(2,1)
      WRITE(*,*)'           SECONDS '
      READ(*,'(F5.2)')SEC(2,1)
      WRITE(*,*)' E= EAST, W= WEST  '
      READ(*,'(A1)')EORW
      IF (NORS.EQ.'S') DEG(1,1)=-DEG(1,1)
      IF (EORW.EQ.'E') DEG(2,1)=-DEG(2,1)
      WRITE(*,807)I
807   FORMAT(' ENTER CODING DELAY FOR STATION ',I1)
      READ(*,'(F6.0)')DEL(I)
      DEG(I,2)=DEG(I,1)
      XMIN(I,2)=XMIN(I,1)
      SEC(I,2)=SEC(I,1)
800   CONTINUE
805   RETURN
300   REWIND 10
      WRITE(*,*) ' GRI NOT FOUND -ENTER 1 TO TRY AGAIN :'
      READ(*,'(I1)') ICON
      IF(ICON.EQ.1) GOTO 9
      STOP
900   REWIND 10
      WRITE(*,*) ' SLAVE NOT FOUND -ENTER 1 TO TRY AGAIN :'
      READ(*,'(I1)') ICON
      IF(ICON.EQ.1) GOTO 9
      STOP
901   WRITE(*,*)' XMITR FILE READ ERROR '
      STOP
      END

      SUBROUTINE FIX(ASMALL,BSMALL,ZLATM,ZLONM,ZLATS,ZLONS,BEDL,TD,
     &RRHO,E2,IASF,FLAG,ZLAT,ZLON)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION ZLATM(2),ZLONM(2),ZLATS(2),ZLONS(2),BEDL(2),TD(2),
     &SM(2),AZM(2),SS(2),AZS(2),A(2),B(2),C(2),RRHO(2),IASF(2)
      DATA PI/3.14159265365D0/TWOPI/6.28318530720D0/TOL/2.0D0/

C     INITIALIZE M = NUMBER OF ITERATION
      M=0
   1  DO 2 I=1,2

C     COMPUTE DISTANCE AND AZIMUTH TO MASTER
      CALL INV(ASMALL,BSMALL,ZLAT,ZLON,ZLATM(I),ZLONM(I),FLAG,DIST,AZ)
      AZM(I)=AZ
      SM(I)=DIST/RRHO(I)

C     COMPUTE ALL-SEAWATER PATH CORRECTION FOR LORAN-C
      IF(IASF(I).EQ.1) CALL ASFCMP(SM(I))

C     TEST FOR RANGE SYSTEM
      IF(ZLATS(I).EQ.0.0.AND.ZLONS(I).EQ.0.0) GO TO 2

C     COMPUTE DISTANCE FROM AZIMUTH TO SLAVE
      CALL INV(ASMALL,BSMALL,ZLAT,ZLON,ZLATS(I),ZLONS(I),FLAG,
     &DIST,AZ)
      AZS(I)=AZ
      SS(I)=DIST/RRHO(I)

C     COMPUTE ALL-SEAWATER PATH CORRECTION FOR LORAN-C

      IF (IASF(I).EQ.1) CALL ASFCMP(SS(I))
   2  CONTINUE
      DO 4 I=1,2
C     TEST FOR RANGE SYSTEM
      IF (ZLATS(I).EQ.0.0.AND.ZLONS(I).EQ.0.0) GO TO 3

C     COMPUTE A, B, C FOR HYPERBOLIC SYSTEM
      A(I)=DSIN(AZS(I))-DSIN(AZM(I))
      B(I)=DCOS(AZS(I))-DCOS(AZM(I))
      C(I)=(SS(I)-SM(I)-TD(I)+BEDL(I))*RRHO(I)
      GO TO 4

C     COMPUTE A, B, C FOR RANGE SYSTEM
    3 A(I)=DSIN(AZM(I))
      B(I)=DCOS(AZM(I))
      C(I)=(SM(I)-ID(I))*RRHO(I)
    4 CONTINUE

C     SOLVE FOR X AND Y
      Y=(C(2)*A(1)-C(1)*A(2))/(B(1)*A(2)-B(2)*A(1))
      X=(C(2)*B(1)-C(1)*B(2))/(A(1)*B(2)-A(2)*B(1))

C     COMPUTE DELTA LATITUDE, DELTA LONGITUDE
      DELLAT=(Y*(1.0D0-E2*DSIN(ZLAT)**2.0D0)**1.50D0)/
     &(ASMALL*(1.0-E2))
      DELLON=(-X*(1.0D0-E2*DSIN(ZLAT)**2.0D0)**0.50D0)/
     &(ASMALL*DCOS(ZLAT))

C     COMPUTE FIX POSITION
      ZLAT=ZLAT+DELLAT
      ZLON=ZLON+DELLON
      IF (ZLON.GT.PI) ZLON=ZLON-TWOPI
      IF (ZLON.LT.-PI)ZLON=ZLON+TWOPI

C     TEST FOR MORE THAN TEN ITERATION
      M=M+1
      IF (M.GT.25) FLAG=-99

C     TEST FOR WITHIN TOLERANCE
      IF ((DABS(X).GT.TOL.OR.DABS(Y).GT.TOL).AND.FLAG.GT.0.0) GO TO 1
      RETURN
      END


      SUBROUTINE ASFCMP(DIST)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION ASF1(2),ASF2(2),ASF3(2)
      ASF1(1)=129.04398D0
      ASF1(2)=2.7412979D0
      ASF2(1)=-0.40758D0
      ASF2(2)=-0.011402D0
      ASF3(1)=0.00064576438D0
      ASF3(2)=0.00032774624D0
      K=2
      IF (DIST.GT.537.0) K=1
      DIST=ASF1(K)/DIST+ASF2(K)+ASF3(K)*DIST+DIST
      RETURN
      END


      SUBROUTINE RAD2DMS(RADS,IDEG,MIN,SEC)
      IMPLICIT REAL*8(A-H,O-Z)
      DEG=RADS*180.D0/3.14159265D0
      IDEG=DINT(DEG)
      RMIN=(DEG-IDEG)*60.0D0
      MIN=DINT(RMIN)
      SEC=(RMIN-MIN)*60.0D0
      IF (SEC.GT.59.50) THEN
        SEC=0.00D0
        MIN=MIN+1
        IF (MIN.EQ.60) THEN
          MIN=0
          IDEG=IDEG+1
        END IF
      END IF
      RETURN
      END



      SUBROUTINE INV(EQRAD,PORAD,RLAT1,RLON1,RLAT2,RLON2,
     &CFLG,DIST,AZ)
      IMPLICIT REAL*8(A-H,O-Z)
      IF (CFLG)501,501,502
501   FLAT=1.0-PORAD/EQRAD
      FLAT2=FLAT*FLAT
      F1=FLAT2*1.25
      F2=FLAT2*0.5
      F3=FLAT2*0.25
      F4=FLAT2*0.125
      F5=FLAT2*0.0625
      F6=FLAT2+FLAT
      F7=F6+1.0
      F8=F6*0.5
      PI=3.14159265360D0
      TWOPI=6.28318530720D0
      CFLG=1.0

502   BETA1=DATAN((1.0-FLAT)*DSIN(RLAT1)/DCOS(RLAT1))
      SBETA1=DSIN(BETA1)
      CBETA1=DCOS(BETA1)
      BETA2=DATAN((1.0-FLAT)*DSIN(RLAT2)/DCOS(RLAT2))
      SBETA2=DSIN(BETA2)
      CBETA2=DCOS(BETA2)
      DELL=RLON1-RLON2
      ADELL=DABS(DELL)
      IF (ADELL-PI)506,505,505
505   ADELL=TWOPI-ADELL
506   SIDEL=DSIN(ADELL)
      CODEL=DCOS(ADELL)
      A=SBETA1*SBETA2
      B=CBETA1*CBETA2
      COPHI=A+B*CODEL
      SIPHI=DSQRT((SIDEL*CBETA2)**2+(SBETA2*CBETA1-SBETA1*
     &CBETA2*CODEL)**2)
      C=B*SIDEL/SIPHI
      EM=1.0-C*C
      PHI=DASIN(SIPHI)
      IF (COPHI)507,508,508
507   PHI=PI-PHI
508   PHISQ=PHI*PHI
      CSPHI=1.0/SIPHI
      CTPHI=COPHI/SIPHI
      PSYCO=SIPHI*COPHI
      TERM1=F7*PHI
      TERM2=A*(F6*SIPHI-F2*PHISQ*CSPHI)
      TERM3=EM*(F2*PHISQ*CTPHI-F8*(PHI+PSYCO))
      TERM4=A*A*F2*PSYCO
      TERM5=EM*EM*(F5*(PHI+PSYCO)-F2*PHISQ*CTPHI-F4*
     &PSYCO*COPHI*COPHI)
      TERM6=A*EM*F2*(PHISQ*CSPHI+PSYCO*COPHI)
      DIST=PORAD*(TERM1+TERM2+TERM3-TERM4+TERM5+TERM6)
      TERM7=F6*PHI
      TERM8=A*(F2*SIPHI+FLAT2*PHISQ*CSPHI)
      TERM9=EM*(F3*PSYCO+FLAT2*PHISQ*CTPHI-F1*PHI)
      ZLAM=C*(TERM7-TERM8+TERM9)+ADELL
      CTAZ=(SBETA2*CBETA1-DCOS(ZLAM)*SBETA1*CBETA2)/
     &(DSIN(ZLAM)*CBETA2)
      IF (CTAZ)510,509,510
509   CTAZ=0.00000005D0
510   AZ=DATAN(1.0/CTAZ)
      IF (DELL)515,514,514
514   IF (DELL-PI)511,512,512
511   IF (CTAZ)520,521,521
520   AZ=AZ+PI
      GO TO 521

512   IF (CTAZ)517,518,518
515   IF (DELL+PI)511,511,516
516   IF (CTAZ)517,518,518
517   AZ=PI-AZ
      GO TO 521
518   AZ=TWOPI-AZ
521   AZ=AZ+PI
      AZ=AZ-TWOPI
      IF (AZ)513,519,519
513   AZ=AZ+TWOPI
519   RETURN
      END
